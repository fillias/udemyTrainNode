const mongoConnect = require('../util/database');
const mongodb = require('mongodb');

/* zde importujem neco co nam dava pristup do db */
const getDb = require('../util/database').getDb;

class Product {
    /* v constructoru chceme vytvorit novy zaznam */
    /* kvuli edit pridame optional fifth argument id */
    /* kdyz bude id undefined bude autogenerated by mongodb */
    /* pro reference usera pridame userID */
    constructor (title, imageUrl, price, description, id, userId) {
        this.title = title;
        this.imageUrl = imageUrl;
        this.price = price;
        this.description = description;
        /* pokud id neexistuje tak vytvorime novy produkt */
        this._id = id ? new mongodb.ObjectID(this._id) : null;
        this.userId = userId;
        
    }

    /* vytvorime save() metodu ktera to ulozi do mongo */
    save() {
        /* get db connection */
        const db = getDb();
        let dbOp;

        /* pokud id existuje, updatni produkt, pokud ne insertni novy */
        if (this._id) {

            // console.log('this._id: ', this._id);

            /* zavolame collection - identifikujeme se kterou collection chceme pracovat */
            /* pokud neexistuje, mongo ji vytvori */
            /* metody ktere muzeme pouzivat viz docka https://docs.mongodb.com/manual/crud/ */
            /* pro update data je updateOne() (nebo updateMany()) 
            ** udpateOne chce dva argumenty - prvni je objekt kde najdem id ktere chceme update
            ** druhy je operace kterou chceme udelat - pomoci $set
            ** $set hodnota je dalsi objekt s novymi zaznamy 
            ** (v tomhle pripade vsechny, takze mu muzeme dat rovnou this)
            */
            dbOp = db.collection('products')
                     .updateOne({_id: this._id}, {$set: this});
            console.log('updating product: ',  this._id);
        } else {

             /* pokud chceme insert data muzeme pouzit insertOne()  nebo insertMany() pokud vice dokumentu naraz */
            /*  takze insertneme this (tento produkt jako js objekt, mongo to prevede na json) 
            ** vraci promisu - vratime to return
            */
            dbOp = db.collection('products').insertOne(this);  
            console.log('inserting new product: ',  this._id);                
        }

        return dbOp
            .then(result => {
            // console.log(result);
            })
            .catch(err => console.log('models/product save err: ', err));       
    }

    /* fetch all products */
    /* find nevraci ihned promisu! vraci tzv "cursor" 
    ** je to object co nam dovoluje prochazet dokumenty step-by-step protoze dat muze byt hromada 
    ** takze je to takovy handler kterymu muzeme rikat "ok dej mi dalsi dokument ... a dalsi dokument..."
    ** pokud fakt chceme vsechny, lze na to pouzit toArray() metodu ktera to vrati do array (a ta vraci promise)
    ** ale tohle pouzivat fakt jen kdyz to vrati tak max 100 dokumentu
    ** jinak je vhodne implementovat pagination
    */
    static fetchAll() {
        const db = getDb();

        return db.collection('products').find().toArray()
        .then(products => {
            //console.log(products);
            return products;
        })
        .catch(err => console.log('models/product fetchAll err: ', err));
    }


    static findById(prodId) {
        const db = getDb();
        /* mongo find nevraci tu promisu ale zase "cursor", takze strankujem vysledky
        ** tady vime ze _id bude jeden takze po prvnim zavolame hned next() 
        ** (next je v tomhle pripade i posledni co najde a to vraci promisu)
         */
        //  console.log('---------');
        //  console.log(db.collection('products').find({_id: prodId}));
        //  console.log('---------');
        /* mongoDB uklada _id v BSON formatu - binary json - je to ObjectId
        ** a v metode find on porovnava ten cely object, ne jen ten id chrchel
        ** nelze tedy pouzit jen toto db.collection('products').find({_id: prodId}).next()
        ** abychom dostali ten object id je treba pouzit mongodb.ObjectId()
        */
        return db.collection('products').find({_id: new mongodb.ObjectId(prodId) }).next()
        .then(product => {
            //console.log(product);
            return product;
        })
        .catch(err => console.log('models/product find err: ', err));
    }

    static deleteByID(prodId) {
        const db = getDb();
        return db.collection('products').deleteOne({_id: new mongodb.ObjectId(prodId) })
        .then(result => {})
        .catch(err => console.log('models/product deleteByID err: ', err));
    }
}
 


module.exports = Product;